"""
统计一个数字在排序数组中出现的次数。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: 2
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: 0
"""

#方法一：
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        i, j = 0, len(nums)-1
        while i <= j:
            m = (i + j) / 2
            if nums[m] <= target:
                i = m + 1
            else:
                j = m -1
        right = i
        if j >= 0 and nums[j] != target:
            return 0
        i = 0
        while i <= j:
            m = (i + j) / 2
            if nums[m] < target:
                i = m + 1
            else:
                j = m -1
        left = j
        return right - left - 1
#  方法二：
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        j = 0
        for i in nums:
            if i == target:
                j += 1
        return j
"""
解题思路：
方法一：
    排序数组中的搜索问题，首先想到 二分法 解决。

    排序数组 nums 中的所有数字 target 形成一个窗口，记窗口的 左 / 右边界 索引分别为 left 和 right ，分别对应窗口左边 / 右边的首个元素。

    本题要求统计数字 target 的出现次数，可转化为：使用二分法分别找到 左边界 left 和 右边界 right ，易得数字 target 的数量为 right - left - 1 。
算法解析：
    初始化： 左边界 i = 0 ，右边界 j = len(nums) - 1 。
    循环二分： 当闭区间 [i, j] 无元素时跳出；
    计算中点 m = (i + j) / 2（向下取整）；
    若 nums[m] < target ，则 target 在闭区间 [m + 1, j] 中，因此执行 i = m + 1；
    若 nums[m] > target ，则 target 在闭区间 [i, m - 1] 中，因此执行 j = m - 1；
    若 nums[m] = target ，则右边界 right 在闭区间 [m+1, j] 中；左边界 left 在闭区间 [i, m-1]中。因此分为以下两种情况：
        若查找 右边界 right ，则执行 i = m + 1 ；（跳出时 i 指向右边界）
        若查找 左边界 left ，则执行 j = m - 1；（跳出时 j 指向左边界）
返回值： 应用两次二分，分别查找 right 和 left ，最终返回 right - left - 1 即可。
复杂度分析：
    时间复杂度 O(log N) ： 二分法为对数级别复杂度。
    空间复杂度 O(1)： 几个变量使用常数大小的额外空间。

方法二：
直接遍历:
    直接遍历即可,统计出现的个数
    时间复杂度O(n),空间复杂度O(1)
"""
