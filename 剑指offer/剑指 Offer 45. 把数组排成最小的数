"""
输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。

示例 1:

输入: [10,2]
输出: "102"
示例 2:

输入: [3,30,34,5,9]
输出: "3033459"
"""
class Solution(object):
    def minNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: str
        """
        strs = [str(num) for num in nums]
        def fast_sort(x ,y):
            if x > y:
                return
            i, j = x, y
            while i < j:
                while strs[j] + strs[x] >= strs[x] + strs[j] and i < j:
                    j -= 1
                while strs[i] + strs[x] <= strs[x] + strs[i] and i < j:
                    i += 1
                strs[i], strs[j] = strs[j], strs[i]
            strs[i], strs[x] = strs[x], strs[i]
            fast_sort(x, i - 1)
            fast_sort(i + 1, y)
        
        fast_sort(0, len(strs) - 1)
        return "".join(strs)
"""
解题思路：
    此题求拼接起来的 “最小数字” ，本质上是一个排序问题。
    排序判断规则： 设 nums 任意两数字的字符串格式 x 和 y ，则
    若拼接字符串 x + y > y + x ，则 m > n ；
    反之，若 x + y < y + x ，则 n < m ；
    根据以上规则，套用任何排序方法对 nums 执行排序即可。
算法流程：
    初始化： 字符串列表 strs ，保存各数字的字符串格式；
    列表排序： 应用以上 “排序判断规则” ，对 strs 执行排序；
    返回值： 拼接 strs 中的所有字符串，并返回。
复杂度分析：

    时间复杂度 O(Nlog N) ： N 为最终返回值的字符数量（ strs 列表的长度≤N ）；使用快排或内置函数的平均时间复杂度为O(NlogN) ，最差为 O(N^2) 。
    空间复杂度 O(N) ： 字符串列表 strs 占用线性大小的额外空间。

"""
