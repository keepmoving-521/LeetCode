"""
输入一个链表，输出该链表中倒数第k个节点。
为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。
例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。
这个链表的倒数第3个节点是值为4的节点。

示例：

给定一个链表: 1->2->3->4->5, 和 k = 2.

返回链表 4->5.
"""
#  方法一：
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getKthFromEnd(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        res = []
        while head:
            res.append(head)
            head = head.next
        return res[-k]
#  方法二：
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getKthFromEnd(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        result = head
        temp = head
        num = 1
        while num != k and temp:
            temp = temp.next
            num += 1
        if num != k:
            return None
        while temp.next:
            temp = temp.next
            result = result.next
        return result
"""
方法一：
解题思路
首先建立一个空list来用于记录所有数值
之后就是遍历所有的character，如果是数那就放到这个list中
因为我们想得到倒数第k个值，所以我们就去取-k个值就行了

方法二：
双指针
思路:
    设置指针temp先在链表中走k步,在使用另一个指针result从头开始,这是两个指针之间的间距为k,
    同时前进,直到temp到达最后最后一个节点,这时result就指向了倒数敌k个节点,返回即可
    同时我们还需要考虑是否存在倒数第k节点的情况
时间复杂度O(n),空间复杂度O(1)
"""
