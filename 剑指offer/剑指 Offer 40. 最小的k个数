"""
输入整数数组 arr ，找出其中最小的 k 个数。
例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。 

示例 1：

输入：arr = [3,2,1], k = 2
输出：[1,2] 或者 [2,1]
示例 2：

输入：arr = [0,1,2,1], k = 1
输出：[0]

"""
#  方法一：
class Solution(object):
    def getLeastNumbers(self, arr, k):
        """
        :type arr: List[int]
        :type k: int
        :rtype: List[int]
        """
        arr.sort()
        return arr[:k]
        
#  方法二：
class Solution(object):
    def getLeastNumbers(self, arr, k):
        """
        :type arr: List[int]
        :type k: int
        :rtype: List[int]
        """
        if k == 0:
            return []
        hp = [-i for i in arr[:k]]
        heapq.heapify(hp)
        for i in range(k, len(arr)):
            if -hp[0] > arr[i]:
                heapq.heappop(hp)
                heapq.heappush(hp, -arr[i])
        res = [-i for i in hp]
        return res
        
"""
方法一：排序
思路和算法:

    对原数组从小到大排序后取出前 k 个数即可。


复杂度分析:

    时间复杂度：O(nlog n)，其中 n 是数组 arr 的长度。算法的时间复杂度即排序的时间复杂度。

    空间复杂度：O(log n)，排序所需额外的空间复杂度为 O(log n)。

方法二：堆
思路和算法

    我们用一个大根堆实时维护数组的前 k 小值。首先将前 k 个数插入大根堆中，随后从第 k+1 个数开始遍历，如果当前遍历到的数比大根堆的堆顶的数要小，
    就把堆顶的数弹出，再插入当前遍历到的数。最后将大根堆里的数存入数组返回即可。
    在代码中，由于 C++ 语言中的堆（即优先队列）为大根堆，我们可以直接做。
    而 Python 语言中的对为小根堆，因此我们要对数组中所有的数取其相反数，才能使用小根堆维护前 k 小值。

复杂度分析

    时间复杂度：O(nlog k)，其中 n 是数组 arr 的长度。由于大根堆实时维护前 k 小值，所以插入删除都是 O(log k)的时间复杂度，最坏情况下数组里 n 个数都会插入，
    所以一共需要 O(nlog k) 的时间复杂度。

    空间复杂度：O(k)，因为大根堆里最多 k 个数。


"""
