"""
输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。
为简单起见，标点符号和普通字母一样处理。例如输入字符串"I am a student. "，则输出"student. a am I"。

示例 1：

输入: "the sky is blue"
输出: "blue is sky the"
示例 2：

输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3：

输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
"""
#方法一：
class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        return ' '.join(s.split()[::-1])
#方法二：        
class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        s = s.strip()
        str = s.split()
        str.reverse()
        return ' '.join(str)
"""
方法：分割 + 倒序
    利用 “字符串分割”、“列表倒序” 的内置函数  ，可简便地实现本题的字符串翻转要求。

算法解析：
    Python ： 由于 split() 方法将单词间的 “多个空格看作一个空格” （参考自 split()和split(' ')的区别 ），因此不会出现多余的 “空单词” 。
    因此，直接利用 reverse() 方法翻转单词列表 strs ，拼接为字符串并返回即可。

复杂度分析：
    时间复杂度 O(N) ： 总体为线性时间复杂度，各函数时间复杂度和参考资料链接如下。
        split() 方法： 为 O(N) ；
        trim() 和 strip() 方法： 最差情况下（当字符串全为空格时），为 O(N) ；
        join() 方法： 为 O(N) ；
        reverse() 方法： 为 O(N) ；
    空间复杂度 O(N) ： 单词列表 strs 占用线性大小的额外空间。

"""
